module LibRaylib

using Clang
using CEnum

using Libdl

const RAYLIB_INCLUDE = joinpath("/usr/local/include/") |> normpath

const RAYLIB_SRC = joinpath("/home/arhik/git_repos/raylib/src") |> normpath

const RAYLIB_HEADERS = [
	#"$RAYLIB_SRC/camera.h",
	#"$RAYLIB_SRC/config.h",
	#"$RAYLIB_SRC/easings.h",
	#"$RAYLIB_SRC/gestures.h",
	#"$RAYLIB_SRC/raudio.h",
	#"$RAYLIB_SRC/physac.h",
	"$RAYLIB_SRC/raylib.h",
	#"$RAYLIB_SRC/raygui.h",
	#"$RAYLIB_SRC/raymath.h",
	#"$RAYLIB_SRC/rlgl.h",
	#"$RAYLIB_SRC/rnet.h",
	#"$RAYLIB_SRC/utils.h",
	"$RAYLIB_SRC/external/stb_image.h",
       ]


function wrap()
    wc = init(; headers = RAYLIB_HEADERS,
	  output_file = joinpath(@__DIR__, "libraylib_api.jl"),
	  common_file = joinpath(@__DIR__, "libraylib_common.jl"),
	  clang_includes = vcat(RAYLIB_SRC, CLANG_INCLUDE),
	  clang_args = ["-I", joinpath(RAYLIB_SRC)],
	  header_wrapped = (root, current) -> root == current,
	  header_library = x -> "libraylib",
	  clang_diagnostics = true,
	  )

    run(wc)
end

	
const libraylib = "libraylib"

# Manually writing skipped functions here
# TextFormat(const char *, ...)
# TraceLog(int, const char *, ...)

function TextFormat(a, b...)
   ccall(:(TextFormat, libraylib), Cstring, (Cstring, Cstring...), a, b...)
end

function TextSubtext(a, b, c)
    ccall(:(TextSubText, libraylib), Cstring, (Cstring, Int32, Int32), a, b, c)
end

function UnhideWindow()
    ccall(:(UnhideWindow, libraylib), Cvoid, ())
end

function LoadFileText(filename)
    ccall(:(LoadFileText, libraylib), Cstring, (Cstring, ), filename)
end

const stbi_uc = Cuchar
const FILE = Ptr{Cvoid}

RL_MALLOC = undef
RL_FREE = undef
RL_REALLOC= undef


if abspath(PROGRAM_FILE) == @__FILE__
    wrap()
else
    # Note libphysics.jl is not autogenerated
    include("libraylib_common.jl")
    include("libphysics.jl")
    include("libraylib_api.jl")
end
end
